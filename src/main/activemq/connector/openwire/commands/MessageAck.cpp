/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/MessageAck.h>
#include <activemq/exceptions/NullPointerException.h>

using namespace std;
using namespace activemq;
using namespace activemq::exceptions;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for MessageAck
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
MessageAck::MessageAck()
{
    this->destination = NULL;
    this->transactionId = NULL;
    this->consumerId = NULL;
    this->ackType = 0;
    this->firstMessageId = NULL;
    this->lastMessageId = NULL;
    this->messageCount = 0;
}

////////////////////////////////////////////////////////////////////////////////
MessageAck::~MessageAck()
{
    delete this->destination;
    delete this->transactionId;
    delete this->consumerId;
    delete this->firstMessageId;
    delete this->lastMessageId;
}

////////////////////////////////////////////////////////////////////////////////
DataStructure* MessageAck::cloneDataStructure() const {
    MessageAck* messageAck = new MessageAck();

    // Copy the data from the base class or classes
    messageAck->copyDataStructure( this );

    return messageAck;
}

////////////////////////////////////////////////////////////////////////////////
void MessageAck::copyDataStructure( const DataStructure* src ) {

    // Copy the data of the base class or classes
    BaseCommand::copyDataStructure( src );

    const MessageAck* srcPtr = dynamic_cast<const MessageAck*>( src );

    if( srcPtr == NULL || src == NULL ) {
    
        throw exceptions::NullPointerException(
            __FILE__, __LINE__,
            "MessageAck::copyDataStructure - src is NULL or invalid" );
    }
    this->setDestination( 
        dynamic_cast<ActiveMQDestination*>( 
            srcPtr->getDestination()->cloneDataStructure() ) );
    this->setTransactionId( 
        dynamic_cast<TransactionId*>( 
            srcPtr->getTransactionId()->cloneDataStructure() ) );
    this->setConsumerId( 
        dynamic_cast<ConsumerId*>( 
            srcPtr->getConsumerId()->cloneDataStructure() ) );
    this->setAckType( srcPtr->getAckType() );
    this->setFirstMessageId( 
        dynamic_cast<MessageId*>( 
            srcPtr->getFirstMessageId()->cloneDataStructure() ) );
    this->setLastMessageId( 
        dynamic_cast<MessageId*>( 
            srcPtr->getLastMessageId()->cloneDataStructure() ) );
    this->setMessageCount( srcPtr->getMessageCount() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char MessageAck::getDataStructureType() const {
    return MessageAck::ID_MESSAGEACK; 
}

////////////////////////////////////////////////////////////////////////////////
const ActiveMQDestination* MessageAck::getDestination() const {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
ActiveMQDestination* MessageAck::getDestination() {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
void MessageAck::setDestination(ActiveMQDestination* destination ) {
    this->destination = destination;
}

////////////////////////////////////////////////////////////////////////////////
const TransactionId* MessageAck::getTransactionId() const {
    return transactionId;
}

////////////////////////////////////////////////////////////////////////////////
TransactionId* MessageAck::getTransactionId() {
    return transactionId;
}

////////////////////////////////////////////////////////////////////////////////
void MessageAck::setTransactionId(TransactionId* transactionId ) {
    this->transactionId = transactionId;
}

////////////////////////////////////////////////////////////////////////////////
const ConsumerId* MessageAck::getConsumerId() const {
    return consumerId;
}

////////////////////////////////////////////////////////////////////////////////
ConsumerId* MessageAck::getConsumerId() {
    return consumerId;
}

////////////////////////////////////////////////////////////////////////////////
void MessageAck::setConsumerId(ConsumerId* consumerId ) {
    this->consumerId = consumerId;
}

////////////////////////////////////////////////////////////////////////////////
const char MessageAck::getAckType() const {
    return ackType;
}

////////////////////////////////////////////////////////////////////////////////
char MessageAck::getAckType() {
    return ackType;
}

////////////////////////////////////////////////////////////////////////////////
void MessageAck::setAckType(char ackType ) {
    this->ackType = ackType;
}

////////////////////////////////////////////////////////////////////////////////
const MessageId* MessageAck::getFirstMessageId() const {
    return firstMessageId;
}

////////////////////////////////////////////////////////////////////////////////
MessageId* MessageAck::getFirstMessageId() {
    return firstMessageId;
}

////////////////////////////////////////////////////////////////////////////////
void MessageAck::setFirstMessageId(MessageId* firstMessageId ) {
    this->firstMessageId = firstMessageId;
}

////////////////////////////////////////////////////////////////////////////////
const MessageId* MessageAck::getLastMessageId() const {
    return lastMessageId;
}

////////////////////////////////////////////////////////////////////////////////
MessageId* MessageAck::getLastMessageId() {
    return lastMessageId;
}

////////////////////////////////////////////////////////////////////////////////
void MessageAck::setLastMessageId(MessageId* lastMessageId ) {
    this->lastMessageId = lastMessageId;
}

////////////////////////////////////////////////////////////////////////////////
const int MessageAck::getMessageCount() const {
    return messageCount;
}

////////////////////////////////////////////////////////////////////////////////
int MessageAck::getMessageCount() {
    return messageCount;
}

////////////////////////////////////////////////////////////////////////////////
void MessageAck::setMessageCount(int messageCount ) {
    this->messageCount = messageCount;
}

