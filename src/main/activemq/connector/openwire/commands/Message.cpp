/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/Message.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for Message
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
Message::Message()
{
    this->producerId = NULL;
    this->destination = NULL;
    this->transactionId = NULL;
    this->originalDestination = NULL;
    this->messageId = NULL;
    this->originalTransactionId = NULL;
    this->groupID = "";
    this->groupSequence = 0;
    this->correlationId = "";
    this->persistent = false;
    this->expiration = 0;
    this->priority = 0;
    this->replyTo = NULL;
    this->timestamp = 0;
    this->type = "";
    this->dataStructure = NULL;
    this->targetConsumerId = NULL;
    this->compressed = false;
    this->redeliveryCounter = 0;
    this->arrival = 0;
    this->userID = "";
    this->recievedByDFBridge = false;
    this->droppable = false;
}

////////////////////////////////////////////////////////////////////////////////
Message::~Message()
{
    delete this->producerId;
    delete this->destination;
    delete this->transactionId;
    delete this->originalDestination;
    delete this->messageId;
    delete this->originalTransactionId;
    delete this->replyTo;
    delete this->dataStructure;
    delete this->targetConsumerId;
    for( size_t ibrokerPath = 0; ibrokerPath < brokerPath.size(); ++ibrokerPath ) {
        delete brokerPath[ibrokerPath];
    }
}

////////////////////////////////////////////////////////////////////////////////
Message* Message::clone() const {
    Message* message = new Message();

    // Copy the data from the base class or classes
    BaseCommand::copy( message );

    message->producerId = this->getProducerId();
    message->destination = this->getDestination();
    message->transactionId = this->getTransactionId();
    message->originalDestination = this->getOriginalDestination();
    message->messageId = this->getMessageId();
    message->originalTransactionId = this->getOriginalTransactionId();
    message->groupID = this->getGroupID();
    message->groupSequence = this->getGroupSequence()->clone();
    message->correlationId = this->getCorrelationId();
    message->persistent = this->getPersistent()->clone();
    message->expiration = this->getExpiration()->clone();
    message->priority = this->getPriority()->clone();
    message->replyTo = this->getReplyTo();
    message->timestamp = this->getTimestamp()->clone();
    message->type = this->getType();
    message->content = this->getContent()->clone();
    message->marshalledProperties = this->getMarshalledProperties()->clone();
    message->dataStructure = this->getDataStructure();
    message->targetConsumerId = this->getTargetConsumerId();
    message->compressed = this->getCompressed()->clone();
    message->redeliveryCounter = this->getRedeliveryCounter()->clone();
    for( size_t ibrokerPath = 0; ibrokerPath < brokerPath.size(); ++ibrokerPath ) {
        message->getBrokerPath().push_back( 
            this->brokerPath[ibrokerPath]->clone();
    }
    message->arrival = this->getArrival()->clone();
    message->userID = this->getUserID();
    message->recievedByDFBridge = this->getRecievedByDFBridge()->clone();
    message->droppable = this->getDroppable()->clone();

    return message
}

////////////////////////////////////////////////////////////////////////////////
void Message::copy( Message* dest ) const {

    // Copy the data from the base class or classes
    BaseCommand::copy( message );

    dest->setProducerId( this->getProducerId() );
    dest->setDestination( this->getDestination() );
    dest->setTransactionId( this->getTransactionId() );
    dest->setOriginalDestination( this->getOriginalDestination() );
    dest->setMessageId( this->getMessageId() );
    dest->setOriginalTransactionId( this->getOriginalTransactionId() );
    dest->setGroupID( this->getGroupID() );
    dest->setGroupSequence( this->getGroupSequence()->clone() );
    dest->setCorrelationId( this->getCorrelationId() );
    dest->setPersistent( this->getPersistent()->clone() );
    dest->setExpiration( this->getExpiration()->clone() );
    dest->setPriority( this->getPriority()->clone() );
    dest->setReplyTo( this->getReplyTo() );
    dest->setTimestamp( this->getTimestamp()->clone() );
    dest->setType( this->getType() );
    dest->setContent( this->getContent()->clone() );
    dest->setMarshalledProperties( this->getMarshalledProperties()->clone() );
    dest->setDataStructure( this->getDataStructure() );
    dest->setTargetConsumerId( this->getTargetConsumerId() );
    dest->setCompressed( this->getCompressed()->clone() );
    dest->setRedeliveryCounter( this->getRedeliveryCounter()->clone() );
    for( size_t ibrokerPath = 0; ibrokerPath < brokerPath.size(); ++ibrokerPath ) {
        dest->getBrokerPath().push_back( 
            this->brokerPath[ibrokerPath]->clone() );
    }
    dest->setArrival( this->getArrival()->clone() );
    dest->setUserID( this->getUserID() );
    dest->setRecievedByDFBridge( this->getRecievedByDFBridge()->clone() );
    dest->setDroppable( this->getDroppable()->clone() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char Message::getDataStructureType() const {
    return Message::ID_MESSAGE; 
}

////////////////////////////////////////////////////////////////////////////////
const ProducerId* Message::getProducerId() const {
    return producerId;
}

////////////////////////////////////////////////////////////////////////////////
ProducerId* Message::getProducerId() {
    return producerId;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setProducerId(ProducerId* producerId ) {
    this->producerId = producerId;
}

////////////////////////////////////////////////////////////////////////////////
const ActiveMQDestination* Message::getDestination() const {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
ActiveMQDestination* Message::getDestination() {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setDestination(ActiveMQDestination* destination ) {
    this->destination = destination;
}

////////////////////////////////////////////////////////////////////////////////
const TransactionId* Message::getTransactionId() const {
    return transactionId;
}

////////////////////////////////////////////////////////////////////////////////
TransactionId* Message::getTransactionId() {
    return transactionId;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setTransactionId(TransactionId* transactionId ) {
    this->transactionId = transactionId;
}

////////////////////////////////////////////////////////////////////////////////
const ActiveMQDestination* Message::getOriginalDestination() const {
    return originalDestination;
}

////////////////////////////////////////////////////////////////////////////////
ActiveMQDestination* Message::getOriginalDestination() {
    return originalDestination;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setOriginalDestination(ActiveMQDestination* originalDestination ) {
    this->originalDestination = originalDestination;
}

////////////////////////////////////////////////////////////////////////////////
const MessageId* Message::getMessageId() const {
    return messageId;
}

////////////////////////////////////////////////////////////////////////////////
MessageId* Message::getMessageId() {
    return messageId;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setMessageId(MessageId* messageId ) {
    this->messageId = messageId;
}

////////////////////////////////////////////////////////////////////////////////
const TransactionId* Message::getOriginalTransactionId() const {
    return originalTransactionId;
}

////////////////////////////////////////////////////////////////////////////////
TransactionId* Message::getOriginalTransactionId() {
    return originalTransactionId;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setOriginalTransactionId(TransactionId* originalTransactionId ) {
    this->originalTransactionId = originalTransactionId;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& Message::getGroupID() const {
    return groupID;
}

////////////////////////////////////////////////////////////////////////////////
std::string& Message::getGroupID() {
    return groupID;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setGroupID(const std::string& groupID ) {
    this->groupID = groupID;
}

////////////////////////////////////////////////////////////////////////////////
const int Message::getGroupSequence() const {
    return groupSequence;
}

////////////////////////////////////////////////////////////////////////////////
int Message::getGroupSequence() {
    return groupSequence;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setGroupSequence(int groupSequence ) {
    this->groupSequence = groupSequence;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& Message::getCorrelationId() const {
    return correlationId;
}

////////////////////////////////////////////////////////////////////////////////
std::string& Message::getCorrelationId() {
    return correlationId;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setCorrelationId(const std::string& correlationId ) {
    this->correlationId = correlationId;
}

////////////////////////////////////////////////////////////////////////////////
const bool Message::getPersistent() const {
    return persistent;
}

////////////////////////////////////////////////////////////////////////////////
bool Message::getPersistent() {
    return persistent;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setPersistent(bool persistent ) {
    this->persistent = persistent;
}

////////////////////////////////////////////////////////////////////////////////
const long long Message::getExpiration() const {
    return expiration;
}

////////////////////////////////////////////////////////////////////////////////
long long Message::getExpiration() {
    return expiration;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setExpiration(long long expiration ) {
    this->expiration = expiration;
}

////////////////////////////////////////////////////////////////////////////////
const char Message::getPriority() const {
    return priority;
}

////////////////////////////////////////////////////////////////////////////////
char Message::getPriority() {
    return priority;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setPriority(char priority ) {
    this->priority = priority;
}

////////////////////////////////////////////////////////////////////////////////
const ActiveMQDestination* Message::getReplyTo() const {
    return replyTo;
}

////////////////////////////////////////////////////////////////////////////////
ActiveMQDestination* Message::getReplyTo() {
    return replyTo;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setReplyTo(ActiveMQDestination* replyTo ) {
    this->replyTo = replyTo;
}

////////////////////////////////////////////////////////////////////////////////
const long long Message::getTimestamp() const {
    return timestamp;
}

////////////////////////////////////////////////////////////////////////////////
long long Message::getTimestamp() {
    return timestamp;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setTimestamp(long long timestamp ) {
    this->timestamp = timestamp;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& Message::getType() const {
    return type;
}

////////////////////////////////////////////////////////////////////////////////
std::string& Message::getType() {
    return type;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setType(const std::string& type ) {
    this->type = type;
}

////////////////////////////////////////////////////////////////////////////////
const std::vector<char> Message::getContent() const {
    return content;
}

////////////////////////////////////////////////////////////////////////////////
std::vector<char> Message::getContent() {
    return content;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setContent(std::vector<char> content ) {
    this->content = content;
}

////////////////////////////////////////////////////////////////////////////////
const std::vector<char> Message::getMarshalledProperties() const {
    return marshalledProperties;
}

////////////////////////////////////////////////////////////////////////////////
std::vector<char> Message::getMarshalledProperties() {
    return marshalledProperties;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setMarshalledProperties(std::vector<char> marshalledProperties ) {
    this->marshalledProperties = marshalledProperties;
}

////////////////////////////////////////////////////////////////////////////////
const DataStructure* Message::getDataStructure() const {
    return dataStructure;
}

////////////////////////////////////////////////////////////////////////////////
DataStructure* Message::getDataStructure() {
    return dataStructure;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setDataStructure(DataStructure* dataStructure ) {
    this->dataStructure = dataStructure;
}

////////////////////////////////////////////////////////////////////////////////
const ConsumerId* Message::getTargetConsumerId() const {
    return targetConsumerId;
}

////////////////////////////////////////////////////////////////////////////////
ConsumerId* Message::getTargetConsumerId() {
    return targetConsumerId;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setTargetConsumerId(ConsumerId* targetConsumerId ) {
    this->targetConsumerId = targetConsumerId;
}

////////////////////////////////////////////////////////////////////////////////
const bool Message::getCompressed() const {
    return compressed;
}

////////////////////////////////////////////////////////////////////////////////
bool Message::getCompressed() {
    return compressed;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setCompressed(bool compressed ) {
    this->compressed = compressed;
}

////////////////////////////////////////////////////////////////////////////////
const int Message::getRedeliveryCounter() const {
    return redeliveryCounter;
}

////////////////////////////////////////////////////////////////////////////////
int Message::getRedeliveryCounter() {
    return redeliveryCounter;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setRedeliveryCounter(int redeliveryCounter ) {
    this->redeliveryCounter = redeliveryCounter;
}

////////////////////////////////////////////////////////////////////////////////
const std::vector<BrokerId*> Message::getBrokerPath() const {
    return brokerPath;
}

////////////////////////////////////////////////////////////////////////////////
std::vector<BrokerId*> Message::getBrokerPath() {
    return brokerPath;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setBrokerPath(std::vector<BrokerId*> brokerPath ) {
    this->brokerPath = brokerPath;
}

////////////////////////////////////////////////////////////////////////////////
const long long Message::getArrival() const {
    return arrival;
}

////////////////////////////////////////////////////////////////////////////////
long long Message::getArrival() {
    return arrival;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setArrival(long long arrival ) {
    this->arrival = arrival;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& Message::getUserID() const {
    return userID;
}

////////////////////////////////////////////////////////////////////////////////
std::string& Message::getUserID() {
    return userID;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setUserID(const std::string& userID ) {
    this->userID = userID;
}

////////////////////////////////////////////////////////////////////////////////
const bool Message::getRecievedByDFBridge() const {
    return recievedByDFBridge;
}

////////////////////////////////////////////////////////////////////////////////
bool Message::getRecievedByDFBridge() {
    return recievedByDFBridge;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setRecievedByDFBridge(bool recievedByDFBridge ) {
    this->recievedByDFBridge = recievedByDFBridge;
}

////////////////////////////////////////////////////////////////////////////////
const bool Message::getDroppable() const {
    return droppable;
}

////////////////////////////////////////////////////////////////////////////////
bool Message::getDroppable() {
    return droppable;
}

////////////////////////////////////////////////////////////////////////////////
void Message::setDroppable(bool droppable ) {
    this->droppable = droppable;
}

