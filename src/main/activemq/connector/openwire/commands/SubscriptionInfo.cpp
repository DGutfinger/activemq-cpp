/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/SubscriptionInfo.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for SubscriptionInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
SubscriptionInfo::SubscriptionInfo()
{
    this->clientId = "";
    this->destination = NULL;
    this->selector = "";
    this->subcriptionName = "";
}

////////////////////////////////////////////////////////////////////////////////
SubscriptionInfo::~SubscriptionInfo()
{
    delete this->destination;
}

////////////////////////////////////////////////////////////////////////////////
SubscriptionInfo* SubscriptionInfo::clone() const {
    SubscriptionInfo* subscriptionInfo = new SubscriptionInfo();

    // Copy the data from the base class or classes
    BaseDataStructure::copy( subscriptionInfo );

    subscriptionInfo->clientId = this->getClientId();
    subscriptionInfo->destination = this->getDestination();
    subscriptionInfo->selector = this->getSelector();
    subscriptionInfo->subcriptionName = this->getSubcriptionName();

    return subscriptionInfo
}

////////////////////////////////////////////////////////////////////////////////
void SubscriptionInfo::copy( SubscriptionInfo* dest ) const {

    // Copy the data from the base class or classes
    BaseDataStructure::copy( subscriptionInfo );

    dest->setClientId( this->getClientId() );
    dest->setDestination( this->getDestination() );
    dest->setSelector( this->getSelector() );
    dest->setSubcriptionName( this->getSubcriptionName() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char SubscriptionInfo::getDataStructureType() const {
    return SubscriptionInfo::ID_SUBSCRIPTIONINFO; 
}

////////////////////////////////////////////////////////////////////////////////
const std::string& SubscriptionInfo::getClientId() const {
    return clientId;
}

////////////////////////////////////////////////////////////////////////////////
std::string& SubscriptionInfo::getClientId() {
    return clientId;
}

////////////////////////////////////////////////////////////////////////////////
void SubscriptionInfo::setClientId(const std::string& clientId ) {
    this->clientId = clientId;
}

////////////////////////////////////////////////////////////////////////////////
const ActiveMQDestination* SubscriptionInfo::getDestination() const {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
ActiveMQDestination* SubscriptionInfo::getDestination() {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
void SubscriptionInfo::setDestination(ActiveMQDestination* destination ) {
    this->destination = destination;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& SubscriptionInfo::getSelector() const {
    return selector;
}

////////////////////////////////////////////////////////////////////////////////
std::string& SubscriptionInfo::getSelector() {
    return selector;
}

////////////////////////////////////////////////////////////////////////////////
void SubscriptionInfo::setSelector(const std::string& selector ) {
    this->selector = selector;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& SubscriptionInfo::getSubcriptionName() const {
    return subcriptionName;
}

////////////////////////////////////////////////////////////////////////////////
std::string& SubscriptionInfo::getSubcriptionName() {
    return subcriptionName;
}

////////////////////////////////////////////////////////////////////////////////
void SubscriptionInfo::setSubcriptionName(const std::string& subcriptionName ) {
    this->subcriptionName = subcriptionName;
}

