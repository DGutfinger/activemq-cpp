/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/ConsumerControl.h>
#include <activemq/exceptions/NullPointerException.h>

using namespace std;
using namespace activemq;
using namespace activemq::exceptions;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for ConsumerControl
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
ConsumerControl::ConsumerControl()
{
    this->close = false;
    this->consumerId = NULL;
    this->prefetch = 0;
    this->flush = false;
    this->start = false;
    this->stop = false;
}

////////////////////////////////////////////////////////////////////////////////
ConsumerControl::~ConsumerControl()
{
    delete this->consumerId;
}

////////////////////////////////////////////////////////////////////////////////
DataStructure* ConsumerControl::cloneDataStructure() const {
    ConsumerControl* consumerControl = new ConsumerControl();

    // Copy the data from the base class or classes
    consumerControl->copyDataStructure( this );

    return consumerControl;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerControl::copyDataStructure( const DataStructure* src ) {

    // Copy the data of the base class or classes
    BaseCommand::copyDataStructure( src );

    const ConsumerControl* srcPtr = dynamic_cast<const ConsumerControl*>( src );

    if( srcPtr == NULL || src == NULL ) {
    
        throw exceptions::NullPointerException(
            __FILE__, __LINE__,
            "ConsumerControl::copyDataStructure - src is NULL or invalid" );
    }
    this->setClose( srcPtr->isClose() );
    this->setConsumerId( 
        dynamic_cast<ConsumerId*>( 
            srcPtr->getConsumerId()->cloneDataStructure() ) );
    this->setPrefetch( srcPtr->getPrefetch() );
    this->setFlush( srcPtr->isFlush() );
    this->setStart( srcPtr->isStart() );
    this->setStop( srcPtr->isStop() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char ConsumerControl::getDataStructureType() const {
    return ConsumerControl::ID_CONSUMERCONTROL; 
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerControl::isClose() const {
    return close;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerControl::isClose() {
    return close;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerControl::setClose(bool close ) {
    this->close = close;
}

////////////////////////////////////////////////////////////////////////////////
const ConsumerId* ConsumerControl::getConsumerId() const {
    return consumerId;
}

////////////////////////////////////////////////////////////////////////////////
ConsumerId* ConsumerControl::getConsumerId() {
    return consumerId;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerControl::setConsumerId(ConsumerId* consumerId ) {
    this->consumerId = consumerId;
}

////////////////////////////////////////////////////////////////////////////////
const int ConsumerControl::getPrefetch() const {
    return prefetch;
}

////////////////////////////////////////////////////////////////////////////////
int ConsumerControl::getPrefetch() {
    return prefetch;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerControl::setPrefetch(int prefetch ) {
    this->prefetch = prefetch;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerControl::isFlush() const {
    return flush;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerControl::isFlush() {
    return flush;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerControl::setFlush(bool flush ) {
    this->flush = flush;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerControl::isStart() const {
    return start;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerControl::isStart() {
    return start;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerControl::setStart(bool start ) {
    this->start = start;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerControl::isStop() const {
    return stop;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerControl::isStop() {
    return stop;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerControl::setStop(bool stop ) {
    this->stop = stop;
}

