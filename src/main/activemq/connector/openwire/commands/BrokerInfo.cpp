/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/BrokerInfo.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for BrokerInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
BrokerInfo::BrokerInfo()
{
    this->brokerId = NULL;
    this->brokerURL = "";
    this->brokerName = "";
    this->slaveBroker = false;
    this->masterBroker = false;
    this->faultTolerantConfiguration = false;
    this->duplexConnection = false;
    this->networkConnection = false;
    this->connectionId = 0;
}

////////////////////////////////////////////////////////////////////////////////
BrokerInfo::~BrokerInfo()
{
    delete this->brokerId;
    for( size_t ipeerBrokerInfos = 0; ipeerBrokerInfos < peerBrokerInfos.size(); ++ipeerBrokerInfos ) {
        delete peerBrokerInfos[ipeerBrokerInfos];
    }
}

////////////////////////////////////////////////////////////////////////////////
BrokerInfo* BrokerInfo::clone() const {
    BrokerInfo* brokerInfo = new BrokerInfo();

    // Copy the data from the base class or classes
    BaseCommand::copy( brokerInfo );

    brokerInfo->brokerId = this->getBrokerId();
    brokerInfo->brokerURL = this->getBrokerURL();
    for( size_t ipeerBrokerInfos = 0; ipeerBrokerInfos < peerBrokerInfos.size(); ++ipeerBrokerInfos ) {
        brokerInfo->getPeerBrokerInfos().push_back( 
            this->peerBrokerInfos[ipeerBrokerInfos]->clone();
    }
    brokerInfo->brokerName = this->getBrokerName();
    brokerInfo->slaveBroker = this->getSlaveBroker()->clone();
    brokerInfo->masterBroker = this->getMasterBroker()->clone();
    brokerInfo->faultTolerantConfiguration = this->getFaultTolerantConfiguration()->clone();
    brokerInfo->duplexConnection = this->getDuplexConnection()->clone();
    brokerInfo->networkConnection = this->getNetworkConnection()->clone();
    brokerInfo->connectionId = this->getConnectionId()->clone();

    return brokerInfo
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::copy( BrokerInfo* dest ) const {

    // Copy the data from the base class or classes
    BaseCommand::copy( brokerInfo );

    dest->setBrokerId( this->getBrokerId() );
    dest->setBrokerURL( this->getBrokerURL() );
    for( size_t ipeerBrokerInfos = 0; ipeerBrokerInfos < peerBrokerInfos.size(); ++ipeerBrokerInfos ) {
        dest->getPeerBrokerInfos().push_back( 
            this->peerBrokerInfos[ipeerBrokerInfos]->clone() );
    }
    dest->setBrokerName( this->getBrokerName() );
    dest->setSlaveBroker( this->getSlaveBroker()->clone() );
    dest->setMasterBroker( this->getMasterBroker()->clone() );
    dest->setFaultTolerantConfiguration( this->getFaultTolerantConfiguration()->clone() );
    dest->setDuplexConnection( this->getDuplexConnection()->clone() );
    dest->setNetworkConnection( this->getNetworkConnection()->clone() );
    dest->setConnectionId( this->getConnectionId()->clone() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char BrokerInfo::getDataStructureType() const {
    return BrokerInfo::ID_BROKERINFO; 
}

////////////////////////////////////////////////////////////////////////////////
const BrokerId* BrokerInfo::getBrokerId() const {
    return brokerId;
}

////////////////////////////////////////////////////////////////////////////////
BrokerId* BrokerInfo::getBrokerId() {
    return brokerId;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setBrokerId(BrokerId* brokerId ) {
    this->brokerId = brokerId;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& BrokerInfo::getBrokerURL() const {
    return brokerURL;
}

////////////////////////////////////////////////////////////////////////////////
std::string& BrokerInfo::getBrokerURL() {
    return brokerURL;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setBrokerURL(const std::string& brokerURL ) {
    this->brokerURL = brokerURL;
}

////////////////////////////////////////////////////////////////////////////////
const std::vector<BrokerInfo*> BrokerInfo::getPeerBrokerInfos() const {
    return peerBrokerInfos;
}

////////////////////////////////////////////////////////////////////////////////
std::vector<BrokerInfo*> BrokerInfo::getPeerBrokerInfos() {
    return peerBrokerInfos;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setPeerBrokerInfos(std::vector<BrokerInfo*> peerBrokerInfos ) {
    this->peerBrokerInfos = peerBrokerInfos;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& BrokerInfo::getBrokerName() const {
    return brokerName;
}

////////////////////////////////////////////////////////////////////////////////
std::string& BrokerInfo::getBrokerName() {
    return brokerName;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setBrokerName(const std::string& brokerName ) {
    this->brokerName = brokerName;
}

////////////////////////////////////////////////////////////////////////////////
const bool BrokerInfo::getSlaveBroker() const {
    return slaveBroker;
}

////////////////////////////////////////////////////////////////////////////////
bool BrokerInfo::getSlaveBroker() {
    return slaveBroker;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setSlaveBroker(bool slaveBroker ) {
    this->slaveBroker = slaveBroker;
}

////////////////////////////////////////////////////////////////////////////////
const bool BrokerInfo::getMasterBroker() const {
    return masterBroker;
}

////////////////////////////////////////////////////////////////////////////////
bool BrokerInfo::getMasterBroker() {
    return masterBroker;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setMasterBroker(bool masterBroker ) {
    this->masterBroker = masterBroker;
}

////////////////////////////////////////////////////////////////////////////////
const bool BrokerInfo::getFaultTolerantConfiguration() const {
    return faultTolerantConfiguration;
}

////////////////////////////////////////////////////////////////////////////////
bool BrokerInfo::getFaultTolerantConfiguration() {
    return faultTolerantConfiguration;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setFaultTolerantConfiguration(bool faultTolerantConfiguration ) {
    this->faultTolerantConfiguration = faultTolerantConfiguration;
}

////////////////////////////////////////////////////////////////////////////////
const bool BrokerInfo::getDuplexConnection() const {
    return duplexConnection;
}

////////////////////////////////////////////////////////////////////////////////
bool BrokerInfo::getDuplexConnection() {
    return duplexConnection;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setDuplexConnection(bool duplexConnection ) {
    this->duplexConnection = duplexConnection;
}

////////////////////////////////////////////////////////////////////////////////
const bool BrokerInfo::getNetworkConnection() const {
    return networkConnection;
}

////////////////////////////////////////////////////////////////////////////////
bool BrokerInfo::getNetworkConnection() {
    return networkConnection;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setNetworkConnection(bool networkConnection ) {
    this->networkConnection = networkConnection;
}

////////////////////////////////////////////////////////////////////////////////
const long long BrokerInfo::getConnectionId() const {
    return connectionId;
}

////////////////////////////////////////////////////////////////////////////////
long long BrokerInfo::getConnectionId() {
    return connectionId;
}

////////////////////////////////////////////////////////////////////////////////
void BrokerInfo::setConnectionId(long long connectionId ) {
    this->connectionId = connectionId;
}

