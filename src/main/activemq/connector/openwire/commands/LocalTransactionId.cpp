/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/LocalTransactionId.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for LocalTransactionId
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
LocalTransactionId::LocalTransactionId()
{
    this->value = 0;
    this->connectionId = NULL;
}

////////////////////////////////////////////////////////////////////////////////
LocalTransactionId::~LocalTransactionId()
{
    delete this->connectionId;
}

////////////////////////////////////////////////////////////////////////////////
LocalTransactionId* LocalTransactionId::clone() const {
    LocalTransactionId* localTransactionId = new LocalTransactionId();

    // Copy the data from the base class or classes
    TransactionId::copy( localTransactionId );

    localTransactionId->value = this->getValue()->clone();
    localTransactionId->connectionId = this->getConnectionId();

    return localTransactionId
}

////////////////////////////////////////////////////////////////////////////////
void LocalTransactionId::copy( LocalTransactionId* dest ) const {

    // Copy the data from the base class or classes
    TransactionId::copy( localTransactionId );

    dest->setValue( this->getValue()->clone() );
    dest->setConnectionId( this->getConnectionId() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char LocalTransactionId::getDataStructureType() const {
    return LocalTransactionId::ID_LOCALTRANSACTIONID; 
}

////////////////////////////////////////////////////////////////////////////////
const long long LocalTransactionId::getValue() const {
    return value;
}

////////////////////////////////////////////////////////////////////////////////
long long LocalTransactionId::getValue() {
    return value;
}

////////////////////////////////////////////////////////////////////////////////
void LocalTransactionId::setValue(long long value ) {
    this->value = value;
}

////////////////////////////////////////////////////////////////////////////////
const ConnectionId* LocalTransactionId::getConnectionId() const {
    return connectionId;
}

////////////////////////////////////////////////////////////////////////////////
ConnectionId* LocalTransactionId::getConnectionId() {
    return connectionId;
}

////////////////////////////////////////////////////////////////////////////////
void LocalTransactionId::setConnectionId(ConnectionId* connectionId ) {
    this->connectionId = connectionId;
}

