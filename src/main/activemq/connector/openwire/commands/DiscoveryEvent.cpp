/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/DiscoveryEvent.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for DiscoveryEvent
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
DiscoveryEvent::DiscoveryEvent()
{
    this->serviceName = "";
    this->brokerName = "";
}

////////////////////////////////////////////////////////////////////////////////
DiscoveryEvent::~DiscoveryEvent()
{
}

////////////////////////////////////////////////////////////////////////////////
DiscoveryEvent* DiscoveryEvent::clone() const {
    DiscoveryEvent* discoveryEvent = new DiscoveryEvent();

    // Copy the data from the base class or classes
    BaseDataStructure::copy( discoveryEvent );

    discoveryEvent->serviceName = this->getServiceName();
    discoveryEvent->brokerName = this->getBrokerName();

    return discoveryEvent
}

////////////////////////////////////////////////////////////////////////////////
void DiscoveryEvent::copy( DiscoveryEvent* dest ) const {

    // Copy the data from the base class or classes
    BaseDataStructure::copy( discoveryEvent );

    dest->setServiceName( this->getServiceName() );
    dest->setBrokerName( this->getBrokerName() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char DiscoveryEvent::getDataStructureType() const {
    return DiscoveryEvent::ID_DISCOVERYEVENT; 
}

////////////////////////////////////////////////////////////////////////////////
const std::string& DiscoveryEvent::getServiceName() const {
    return serviceName;
}

////////////////////////////////////////////////////////////////////////////////
std::string& DiscoveryEvent::getServiceName() {
    return serviceName;
}

////////////////////////////////////////////////////////////////////////////////
void DiscoveryEvent::setServiceName(const std::string& serviceName ) {
    this->serviceName = serviceName;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& DiscoveryEvent::getBrokerName() const {
    return brokerName;
}

////////////////////////////////////////////////////////////////////////////////
std::string& DiscoveryEvent::getBrokerName() {
    return brokerName;
}

////////////////////////////////////////////////////////////////////////////////
void DiscoveryEvent::setBrokerName(const std::string& brokerName ) {
    this->brokerName = brokerName;
}

