/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _ACTIVEMQ_CONNECTOR_OPENWIRE_COMMANDS_BROKERINFO_H_
#define _ACTIVEMQ_CONNECTOR_OPENWIRE_COMMANDS_BROKERINFO_H_

// Turn off warning message for ignored exception specification
#ifdef _MSC_VER
#pragma warning( disable : 4290 )
#endif

#include <activemq/connector/openwire/commands/BaseCommand.h>
#include <activemq/connector/openwire/commands/BrokerId.h>
#include <activemq/connector/openwire/commands/BrokerInfo.h>
#include <vector>
#include <string>

namespace activemq{
namespace connector{
namespace openwire{
namespace commands{

    /*
     *
     *  Command and marshaling code for OpenWire format for ${className}
     *
     *
     *  NOTE!: This file is autogenerated - do not modify!
     *         if you need to make a change, please see the Java Classes
     *         in the activemq-openwire-generator module
     *
     */
    class BrokerInfo : public BaseCommand<transport::Command>
    {
    protected:

        BrokerId* brokerId;
        std::string brokerURL;
        std::vector<BrokerInfo*> peerBrokerInfos;
        std::string brokerName;
        bool slaveBroker;
        bool masterBroker;
        bool faultTolerantConfiguration;
        bool duplexConnection;
        bool networkConnection;
        long long connectionId;

    public:

        const static unsigned char ID_BROKERINFO = 2;

    public:

        BrokerInfo();
        virtual ~BrokerInfo();

        /**
         * Get the unique identifier that this object and its own
         * Marshaller share.
         * @returns new DataStructure type copy.
         */
        virtual unsigned char getDataStructureType() const;

        /**
         * Clone this object and return a new instance that the
         * caller now owns, this will be an exact copy of this one
         * @returns new copy of this object.
         */
        virtual DataStructure* cloneDataStructure() const;

        /**
         * Copy the contents of the passed object into this objects
         * members, overwriting any existing data.
         * @return src - Source Object
         */
        virtual void copyDataStructure( const DataStructure* src );

        virtual const BrokerId* getBrokerId() const;
        virtual BrokerId* getBrokerId();
        virtual void setBrokerId( BrokerId* brokerId );

        virtual const std::string& getBrokerURL() const;
        virtual std::string& getBrokerURL();
        virtual void setBrokerURL( const std::string& brokerURL );

        virtual const std::vector<BrokerInfo*>& getPeerBrokerInfos() const;
        virtual std::vector<BrokerInfo*>& getPeerBrokerInfos();
        virtual void setPeerBrokerInfos( const std::vector<BrokerInfo*>& peerBrokerInfos );

        virtual const std::string& getBrokerName() const;
        virtual std::string& getBrokerName();
        virtual void setBrokerName( const std::string& brokerName );

        virtual bool isSlaveBroker() const;
        virtual void setSlaveBroker( bool slaveBroker );

        virtual bool isMasterBroker() const;
        virtual void setMasterBroker( bool masterBroker );

        virtual bool isFaultTolerantConfiguration() const;
        virtual void setFaultTolerantConfiguration( bool faultTolerantConfiguration );

        virtual bool isDuplexConnection() const;
        virtual void setDuplexConnection( bool duplexConnection );

        virtual bool isNetworkConnection() const;
        virtual void setNetworkConnection( bool networkConnection );

        virtual long long getConnectionId() const;
        virtual void setConnectionId( long long connectionId );

    };

}}}}

#endif /*_ACTIVEMQ_CONNECTOR_OPENWIRE_COMMANDS_BROKERINFO_H_*/

