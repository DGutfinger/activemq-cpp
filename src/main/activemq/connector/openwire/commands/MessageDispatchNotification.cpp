/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/MessageDispatchNotification.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for MessageDispatchNotification
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
MessageDispatchNotification::MessageDispatchNotification()
{
    this->consumerId = NULL;
    this->destination = NULL;
    this->deliverySequenceId = 0;
    this->messageId = NULL;
}

////////////////////////////////////////////////////////////////////////////////
MessageDispatchNotification::~MessageDispatchNotification()
{
    delete this->consumerId;
    delete this->destination;
    delete this->messageId;
}

////////////////////////////////////////////////////////////////////////////////
MessageDispatchNotification* MessageDispatchNotification::clone() const {
    MessageDispatchNotification* messageDispatchNotification = new MessageDispatchNotification();

    // Copy the data from the base class or classes
    BaseCommand::copy( messageDispatchNotification );

    messageDispatchNotification->consumerId = this->getConsumerId();
    messageDispatchNotification->destination = this->getDestination();
    messageDispatchNotification->deliverySequenceId = this->getDeliverySequenceId()->clone();
    messageDispatchNotification->messageId = this->getMessageId();

    return messageDispatchNotification
}

////////////////////////////////////////////////////////////////////////////////
void MessageDispatchNotification::copy( MessageDispatchNotification* dest ) const {

    // Copy the data from the base class or classes
    BaseCommand::copy( messageDispatchNotification );

    dest->setConsumerId( this->getConsumerId() );
    dest->setDestination( this->getDestination() );
    dest->setDeliverySequenceId( this->getDeliverySequenceId()->clone() );
    dest->setMessageId( this->getMessageId() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char MessageDispatchNotification::getDataStructureType() const {
    return MessageDispatchNotification::ID_MESSAGEDISPATCHNOTIFICATION; 
}

////////////////////////////////////////////////////////////////////////////////
const ConsumerId* MessageDispatchNotification::getConsumerId() const {
    return consumerId;
}

////////////////////////////////////////////////////////////////////////////////
ConsumerId* MessageDispatchNotification::getConsumerId() {
    return consumerId;
}

////////////////////////////////////////////////////////////////////////////////
void MessageDispatchNotification::setConsumerId(ConsumerId* consumerId ) {
    this->consumerId = consumerId;
}

////////////////////////////////////////////////////////////////////////////////
const ActiveMQDestination* MessageDispatchNotification::getDestination() const {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
ActiveMQDestination* MessageDispatchNotification::getDestination() {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
void MessageDispatchNotification::setDestination(ActiveMQDestination* destination ) {
    this->destination = destination;
}

////////////////////////////////////////////////////////////////////////////////
const long long MessageDispatchNotification::getDeliverySequenceId() const {
    return deliverySequenceId;
}

////////////////////////////////////////////////////////////////////////////////
long long MessageDispatchNotification::getDeliverySequenceId() {
    return deliverySequenceId;
}

////////////////////////////////////////////////////////////////////////////////
void MessageDispatchNotification::setDeliverySequenceId(long long deliverySequenceId ) {
    this->deliverySequenceId = deliverySequenceId;
}

////////////////////////////////////////////////////////////////////////////////
const MessageId* MessageDispatchNotification::getMessageId() const {
    return messageId;
}

////////////////////////////////////////////////////////////////////////////////
MessageId* MessageDispatchNotification::getMessageId() {
    return messageId;
}

////////////////////////////////////////////////////////////////////////////////
void MessageDispatchNotification::setMessageId(MessageId* messageId ) {
    this->messageId = messageId;
}

