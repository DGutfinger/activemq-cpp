/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/JournalQueueAck.h>
#include <activemq/exceptions/NullPointerException.h>

using namespace std;
using namespace activemq;
using namespace activemq::exceptions;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshaling code for OpenWire format for JournalQueueAck
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
JournalQueueAck::JournalQueueAck()
{
    this->destination = NULL;
    this->messageAck = NULL;
}

////////////////////////////////////////////////////////////////////////////////
JournalQueueAck::~JournalQueueAck()
{
    delete this->destination;
    delete this->messageAck;
}

////////////////////////////////////////////////////////////////////////////////
DataStructure* JournalQueueAck::cloneDataStructure() const {
    JournalQueueAck* journalQueueAck = new JournalQueueAck();

    // Copy the data from the base class or classes
    journalQueueAck->copyDataStructure( this );

    return journalQueueAck;
}

////////////////////////////////////////////////////////////////////////////////
void JournalQueueAck::copyDataStructure( const DataStructure* src ) {

    // Copy the data of the base class or classes
    BaseDataStructure::copyDataStructure( src );

    const JournalQueueAck* srcPtr = dynamic_cast<const JournalQueueAck*>( src );

    if( srcPtr == NULL || src == NULL ) {
    
        throw exceptions::NullPointerException(
            __FILE__, __LINE__,
            "JournalQueueAck::copyDataStructure - src is NULL or invalid" );
    }
    this->setDestination( 
        dynamic_cast<ActiveMQDestination*>( 
            srcPtr->getDestination()->cloneDataStructure() ) );
    this->setMessageAck( 
        dynamic_cast<MessageAck*>( 
            srcPtr->getMessageAck()->cloneDataStructure() ) );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char JournalQueueAck::getDataStructureType() const {
    return JournalQueueAck::ID_JOURNALQUEUEACK; 
}

////////////////////////////////////////////////////////////////////////////////
const ActiveMQDestination* JournalQueueAck::getDestination() const {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
ActiveMQDestination* JournalQueueAck::getDestination() {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
void JournalQueueAck::setDestination(ActiveMQDestination* destination ) {
    this->destination = destination;
}

////////////////////////////////////////////////////////////////////////////////
const MessageAck* JournalQueueAck::getMessageAck() const {
    return messageAck;
}

////////////////////////////////////////////////////////////////////////////////
MessageAck* JournalQueueAck::getMessageAck() {
    return messageAck;
}

////////////////////////////////////////////////////////////////////////////////
void JournalQueueAck::setMessageAck(MessageAck* messageAck ) {
    this->messageAck = messageAck;
}

