/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/ConnectionControl.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for ConnectionControl
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
ConnectionControl::ConnectionControl()
{
    this->close = false;
    this->exit = false;
    this->faultTolerant = false;
    this->resume = false;
    this->suspend = false;
}

////////////////////////////////////////////////////////////////////////////////
ConnectionControl::~ConnectionControl()
{
}

////////////////////////////////////////////////////////////////////////////////
ConnectionControl* ConnectionControl::clone() const {
    ConnectionControl* connectionControl = new ConnectionControl();

    // Copy the data from the base class or classes
    BaseCommand::copy( connectionControl );

    connectionControl->close = this->getClose()->clone();
    connectionControl->exit = this->getExit()->clone();
    connectionControl->faultTolerant = this->getFaultTolerant()->clone();
    connectionControl->resume = this->getResume()->clone();
    connectionControl->suspend = this->getSuspend()->clone();

    return connectionControl
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionControl::copy( ConnectionControl* dest ) const {

    // Copy the data from the base class or classes
    BaseCommand::copy( connectionControl );

    dest->setClose( this->getClose()->clone() );
    dest->setExit( this->getExit()->clone() );
    dest->setFaultTolerant( this->getFaultTolerant()->clone() );
    dest->setResume( this->getResume()->clone() );
    dest->setSuspend( this->getSuspend()->clone() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char ConnectionControl::getDataStructureType() const {
    return ConnectionControl::ID_CONNECTIONCONTROL; 
}

////////////////////////////////////////////////////////////////////////////////
const bool ConnectionControl::getClose() const {
    return close;
}

////////////////////////////////////////////////////////////////////////////////
bool ConnectionControl::getClose() {
    return close;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionControl::setClose(bool close ) {
    this->close = close;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConnectionControl::getExit() const {
    return exit;
}

////////////////////////////////////////////////////////////////////////////////
bool ConnectionControl::getExit() {
    return exit;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionControl::setExit(bool exit ) {
    this->exit = exit;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConnectionControl::getFaultTolerant() const {
    return faultTolerant;
}

////////////////////////////////////////////////////////////////////////////////
bool ConnectionControl::getFaultTolerant() {
    return faultTolerant;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionControl::setFaultTolerant(bool faultTolerant ) {
    this->faultTolerant = faultTolerant;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConnectionControl::getResume() const {
    return resume;
}

////////////////////////////////////////////////////////////////////////////////
bool ConnectionControl::getResume() {
    return resume;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionControl::setResume(bool resume ) {
    this->resume = resume;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConnectionControl::getSuspend() const {
    return suspend;
}

////////////////////////////////////////////////////////////////////////////////
bool ConnectionControl::getSuspend() {
    return suspend;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionControl::setSuspend(bool suspend ) {
    this->suspend = suspend;
}

