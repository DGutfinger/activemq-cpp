/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/ConnectionError.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for ConnectionError
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
ConnectionError::ConnectionError()
{
    this->exception = NULL;
    this->connectionId = NULL;
}

////////////////////////////////////////////////////////////////////////////////
ConnectionError::~ConnectionError()
{
    delete this->exception;
    delete this->connectionId;
}

////////////////////////////////////////////////////////////////////////////////
unsigned char ConnectionError::getDataStructureType() const
{
    return ConnectionError::ID_CONNECTIONERROR; 
}

////////////////////////////////////////////////////////////////////////////////
const BrokerError* ConnectionError::getException() const {
    return exception;
}

////////////////////////////////////////////////////////////////////////////////
BrokerError* ConnectionError::getException() {
    return exception;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionError::setException(BrokerError* exception ) {
    this->exception = exception;
}

////////////////////////////////////////////////////////////////////////////////
const ConnectionId* ConnectionError::getConnectionId() const {
    return connectionId;
}

////////////////////////////////////////////////////////////////////////////////
ConnectionId* ConnectionError::getConnectionId() {
    return connectionId;
}

////////////////////////////////////////////////////////////////////////////////
void ConnectionError::setConnectionId(ConnectionId* connectionId ) {
    this->connectionId = connectionId;
}

