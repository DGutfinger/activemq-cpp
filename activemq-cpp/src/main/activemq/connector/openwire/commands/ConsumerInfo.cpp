/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <activemq/connector/openwire/commands/ConsumerInfo.h>

using namespace std;
using namespace activemq;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;

/*
 *
 *  Command and marshalling code for OpenWire format for ConsumerInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Java Classes in the
 *         activemq-core module
 *
 */
////////////////////////////////////////////////////////////////////////////////
ConsumerInfo::ConsumerInfo()
{
    this->consumerId = NULL;
    this->browser = false;
    this->destination = NULL;
    this->prefetchSize = 0;
    this->maximumPendingMessageLimit = 0;
    this->dispatchAsync = false;
    this->selector = "";
    this->subcriptionName = "";
    this->noLocal = false;
    this->exclusive = false;
    this->retroactive = false;
    this->priority = 0;
    this->additionalPredicate = NULL;
    this->networkSubscription = false;
    this->optimizedAcknowledge = false;
    this->noRangeAcks = false;
}

////////////////////////////////////////////////////////////////////////////////
ConsumerInfo::~ConsumerInfo()
{
    delete this->consumerId;
    delete this->destination;
    for( size_t ibrokerPath = 0; ibrokerPath < brokerPath.size(); ++ibrokerPath ) {
        delete brokerPath[ibrokerPath];
    }
    delete this->additionalPredicate;
}

////////////////////////////////////////////////////////////////////////////////
ConsumerInfo* ConsumerInfo::clone() const {
    ConsumerInfo* consumerInfo = new ConsumerInfo();

    // Copy the data from the base class or classes
    BaseCommand::copy( consumerInfo );

    consumerInfo->consumerId = this->getConsumerId();
    consumerInfo->browser = this->getBrowser()->clone();
    consumerInfo->destination = this->getDestination();
    consumerInfo->prefetchSize = this->getPrefetchSize()->clone();
    consumerInfo->maximumPendingMessageLimit = this->getMaximumPendingMessageLimit()->clone();
    consumerInfo->dispatchAsync = this->getDispatchAsync()->clone();
    consumerInfo->selector = this->getSelector();
    consumerInfo->subcriptionName = this->getSubcriptionName();
    consumerInfo->noLocal = this->getNoLocal()->clone();
    consumerInfo->exclusive = this->getExclusive()->clone();
    consumerInfo->retroactive = this->getRetroactive()->clone();
    consumerInfo->priority = this->getPriority()->clone();
    for( size_t ibrokerPath = 0; ibrokerPath < brokerPath.size(); ++ibrokerPath ) {
        consumerInfo->getBrokerPath().push_back( 
            this->brokerPath[ibrokerPath]->clone();
    }
    consumerInfo->additionalPredicate = this->getAdditionalPredicate();
    consumerInfo->networkSubscription = this->getNetworkSubscription()->clone();
    consumerInfo->optimizedAcknowledge = this->getOptimizedAcknowledge()->clone();
    consumerInfo->noRangeAcks = this->getNoRangeAcks()->clone();

    return consumerInfo
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::copy( ConsumerInfo* dest ) const {

    // Copy the data from the base class or classes
    BaseCommand::copy( consumerInfo );

    dest->setConsumerId( this->getConsumerId() );
    dest->setBrowser( this->getBrowser()->clone() );
    dest->setDestination( this->getDestination() );
    dest->setPrefetchSize( this->getPrefetchSize()->clone() );
    dest->setMaximumPendingMessageLimit( this->getMaximumPendingMessageLimit()->clone() );
    dest->setDispatchAsync( this->getDispatchAsync()->clone() );
    dest->setSelector( this->getSelector() );
    dest->setSubcriptionName( this->getSubcriptionName() );
    dest->setNoLocal( this->getNoLocal()->clone() );
    dest->setExclusive( this->getExclusive()->clone() );
    dest->setRetroactive( this->getRetroactive()->clone() );
    dest->setPriority( this->getPriority()->clone() );
    for( size_t ibrokerPath = 0; ibrokerPath < brokerPath.size(); ++ibrokerPath ) {
        dest->getBrokerPath().push_back( 
            this->brokerPath[ibrokerPath]->clone() );
    }
    dest->setAdditionalPredicate( this->getAdditionalPredicate() );
    dest->setNetworkSubscription( this->getNetworkSubscription()->clone() );
    dest->setOptimizedAcknowledge( this->getOptimizedAcknowledge()->clone() );
    dest->setNoRangeAcks( this->getNoRangeAcks()->clone() );
}

////////////////////////////////////////////////////////////////////////////////
unsigned char ConsumerInfo::getDataStructureType() const {
    return ConsumerInfo::ID_CONSUMERINFO; 
}

////////////////////////////////////////////////////////////////////////////////
const ConsumerId* ConsumerInfo::getConsumerId() const {
    return consumerId;
}

////////////////////////////////////////////////////////////////////////////////
ConsumerId* ConsumerInfo::getConsumerId() {
    return consumerId;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setConsumerId(ConsumerId* consumerId ) {
    this->consumerId = consumerId;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerInfo::getBrowser() const {
    return browser;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerInfo::getBrowser() {
    return browser;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setBrowser(bool browser ) {
    this->browser = browser;
}

////////////////////////////////////////////////////////////////////////////////
const ActiveMQDestination* ConsumerInfo::getDestination() const {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
ActiveMQDestination* ConsumerInfo::getDestination() {
    return destination;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setDestination(ActiveMQDestination* destination ) {
    this->destination = destination;
}

////////////////////////////////////////////////////////////////////////////////
const int ConsumerInfo::getPrefetchSize() const {
    return prefetchSize;
}

////////////////////////////////////////////////////////////////////////////////
int ConsumerInfo::getPrefetchSize() {
    return prefetchSize;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setPrefetchSize(int prefetchSize ) {
    this->prefetchSize = prefetchSize;
}

////////////////////////////////////////////////////////////////////////////////
const int ConsumerInfo::getMaximumPendingMessageLimit() const {
    return maximumPendingMessageLimit;
}

////////////////////////////////////////////////////////////////////////////////
int ConsumerInfo::getMaximumPendingMessageLimit() {
    return maximumPendingMessageLimit;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setMaximumPendingMessageLimit(int maximumPendingMessageLimit ) {
    this->maximumPendingMessageLimit = maximumPendingMessageLimit;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerInfo::getDispatchAsync() const {
    return dispatchAsync;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerInfo::getDispatchAsync() {
    return dispatchAsync;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setDispatchAsync(bool dispatchAsync ) {
    this->dispatchAsync = dispatchAsync;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& ConsumerInfo::getSelector() const {
    return selector;
}

////////////////////////////////////////////////////////////////////////////////
std::string& ConsumerInfo::getSelector() {
    return selector;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setSelector(const std::string& selector ) {
    this->selector = selector;
}

////////////////////////////////////////////////////////////////////////////////
const std::string& ConsumerInfo::getSubcriptionName() const {
    return subcriptionName;
}

////////////////////////////////////////////////////////////////////////////////
std::string& ConsumerInfo::getSubcriptionName() {
    return subcriptionName;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setSubcriptionName(const std::string& subcriptionName ) {
    this->subcriptionName = subcriptionName;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerInfo::getNoLocal() const {
    return noLocal;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerInfo::getNoLocal() {
    return noLocal;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setNoLocal(bool noLocal ) {
    this->noLocal = noLocal;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerInfo::getExclusive() const {
    return exclusive;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerInfo::getExclusive() {
    return exclusive;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setExclusive(bool exclusive ) {
    this->exclusive = exclusive;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerInfo::getRetroactive() const {
    return retroactive;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerInfo::getRetroactive() {
    return retroactive;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setRetroactive(bool retroactive ) {
    this->retroactive = retroactive;
}

////////////////////////////////////////////////////////////////////////////////
const char ConsumerInfo::getPriority() const {
    return priority;
}

////////////////////////////////////////////////////////////////////////////////
char ConsumerInfo::getPriority() {
    return priority;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setPriority(char priority ) {
    this->priority = priority;
}

////////////////////////////////////////////////////////////////////////////////
const std::vector<BrokerId*> ConsumerInfo::getBrokerPath() const {
    return brokerPath;
}

////////////////////////////////////////////////////////////////////////////////
std::vector<BrokerId*> ConsumerInfo::getBrokerPath() {
    return brokerPath;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setBrokerPath(std::vector<BrokerId*> brokerPath ) {
    this->brokerPath = brokerPath;
}

////////////////////////////////////////////////////////////////////////////////
const BooleanExpression* ConsumerInfo::getAdditionalPredicate() const {
    return additionalPredicate;
}

////////////////////////////////////////////////////////////////////////////////
BooleanExpression* ConsumerInfo::getAdditionalPredicate() {
    return additionalPredicate;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setAdditionalPredicate(BooleanExpression* additionalPredicate ) {
    this->additionalPredicate = additionalPredicate;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerInfo::getNetworkSubscription() const {
    return networkSubscription;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerInfo::getNetworkSubscription() {
    return networkSubscription;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setNetworkSubscription(bool networkSubscription ) {
    this->networkSubscription = networkSubscription;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerInfo::getOptimizedAcknowledge() const {
    return optimizedAcknowledge;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerInfo::getOptimizedAcknowledge() {
    return optimizedAcknowledge;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setOptimizedAcknowledge(bool optimizedAcknowledge ) {
    this->optimizedAcknowledge = optimizedAcknowledge;
}

////////////////////////////////////////////////////////////////////////////////
const bool ConsumerInfo::getNoRangeAcks() const {
    return noRangeAcks;
}

////////////////////////////////////////////////////////////////////////////////
bool ConsumerInfo::getNoRangeAcks() {
    return noRangeAcks;
}

////////////////////////////////////////////////////////////////////////////////
void ConsumerInfo::setNoRangeAcks(bool noRangeAcks ) {
    this->noRangeAcks = noRangeAcks;
}

