/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <activemq/connector/openwire/marshal/v2/MessageMarshaller.h>

#include <activemq/connector/openwire/commands/Message.h>

//
//     NOTE!: This file is autogenerated - do not modify!
//            if you need to make a change, please see the Java Classes in the
//            activemq-core module
//

using namespace std;
using namespace activemq;
using namespace activemq::io;
using namespace activemq::connector;
using namespace activemq::connector::openwire;
using namespace activemq::connector::openwire::commands;
using namespace activemq::connector::openwire::marshal;
using namespace activemq::connector::openwire::util;
using namespace activemq::connector::openwire::marshal::v2;

///////////////////////////////////////////////////////////////////////////////
void MessageMarshaller::tightUnmarshal( OpenWireFormat* wireFormat, DataStructure* dataStructure, DataInputStream* dataIn, BooleanStream* bs ) {
   BaseCommandMarshaller::tightUnmarshal( wireFormat, dataStructure, dataIn, bs );

    Message* info =
        dynamic_cast<Message*>( dataStructure );
    info->setProducerId( dynamic_cast< ProducerId* >(
        tightUnmarsalCachedObject( wireFormat, dataIn, bs ) );
    info->setDestination( dynamic_cast< ActiveMQDestination* >(
        tightUnmarsalCachedObject( wireFormat, dataIn, bs ) );
    info->setTransactionId( dynamic_cast< TransactionId* >(
        tightUnmarsalCachedObject( wireFormat, dataIn, bs ) );
    info->setOriginalDestination( dynamic_cast< ActiveMQDestination* >(
        tightUnmarsalCachedObject( wireFormat, dataIn, bs ) );
    info->setMessageId( dynamic_cast< MessageId* >(
        tightUnmarsalNestedObject( wireFormat, dataIn, bs ) );
    info->setOriginalTransactionId( dynamic_cast< TransactionId* >(
        tightUnmarsalCachedObject( wireFormat, dataIn, bs ) );
    info->setGroupID( TightUnmarshalString( dataIn, bs ) );
    info->setGroupSequence( dataIn->readInt() );
    info->setCorrelationId( TightUnmarshalString( dataIn, bs ) );
    info->setPersistent( bs->readBoolean() );
    info->setExpiration( TightUnmarshalLong( wireFormat, dataIn, bs ) );
    info->setPriority( dataIn->readByte() );
    info->setReplyTo( dynamic_cast< ActiveMQDestination* >(
        tightUnmarsalNestedObject( wireFormat, dataIn, bs ) );
    info->setTimestamp( TightUnmarshalLong( wireFormat, dataIn, bs ) );
    info->setType( TightUnmarshalString( dataIn, bs ) );
    info->setContent( tightUnmarshalByteArray( dataIn, bs ) );
    info->setMarshalledProperties( tightUnmarshalByteArray( dataIn, bs ) );
    info->setDataStructure( dynamic_cast< DataStructure* >(
        tightUnmarsalNestedObject( wireFormat, dataIn, bs ) );
    info->setTargetConsumerId( dynamic_cast< ConsumerId* >(
        tightUnmarsalCachedObject( wireFormat, dataIn, bs ) );
    info->setCompressed( bs->readBoolean() );
    info->setRedeliveryCounter( dataIn->readInt() );

    if( bs->readBoolean() ) {
        short size = dataIn->readShort();
        BrokerId* value = new BrokerId[size];
        for( int i = 0; i < size; i++ ) {
            value[i] = dynamic_cast< BrokerId* >(
                tightUnmarsalNestedObject( wireFormat, dataIn, bs ) );
        }
        info->setBrokerPath( value );
    }
    else {
        info->setBrokerPath( NULL );
    }
    info->setArrival( TightUnmarshalLong( wireFormat, dataIn, bs ) );
    info->setUserID( TightUnmarshalString( dataIn, bs ) );
    info->setRecievedByDFBridge( bs->readBoolean() );
}

///////////////////////////////////////////////////////////////////////////////
int MessageMarshaller::tightMarshal1( OpenWireFormat& wireFormat, DataStructure* dataStructure, BooleanStream& bs ) {

    Message* info =
        dynamic_cast<Message*>( dataStructure );

    int rc = BaseCommandMarshaller::tightMarshal1( wireFormat, dataStructure, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getProducerId() );

    rc += tightMarshalCachedObject1( wireFormat, data, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getDestination() );

    rc += tightMarshalCachedObject1( wireFormat, data, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getTransactionId() );

    rc += tightMarshalCachedObject1( wireFormat, data, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getOriginalDestination() );

    rc += tightMarshalCachedObject1( wireFormat, data, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getMessageId() );

    rc += tightMarshalNestedObject1( wireFormat, data, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getOriginalTransactionId() );

    rc += tightMarshalCachedObject1( wireFormat, data, bs );
    rc += tightMarshalString1( info->getGroupID(), bs );
    rc += tightMarshalString1( info->getCorrelationId(), bs );
    bs->writeBoolean( info->isPersistent() );
    rc += tightMarshalLong1( wireFormat, info->getExpiration(), bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getReplyTo() );

    rc += tightMarshalNestedObject1( wireFormat, data, bs );
    rc += tightMarshalLong1( wireFormat, info->getTimestamp(), bs );
    rc += tightMarshalString1( info->getType(), bs );
    bs->writeBoolean( info->getContent() != NULL );
    rc += info->getContent()() == NULL ? 0 : info->getContent().Length + 4;
    bs->writeBoolean( info->getMarshalledProperties() != NULL );
    rc += info->getMarshalledProperties()() == NULL ? 0 : info->getMarshalledProperties().Length + 4;
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getDataStructure() );

    rc += tightMarshalNestedObject1( wireFormat, data, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getTargetConsumerId() );

    rc += tightMarshalCachedObject1( wireFormat, data, bs );
    bs->writeBoolean( info->isCompressed() );
    rc += tightMarshalObjectArray1( wireFormat, info->getBrokerPath(), bs );
    rc += tightMarshalLong1( wireFormat, info->getArrival(), bs );
    rc += tightMarshalString1( info->getUserID(), bs );
    bs->writeBoolean( info->isRecievedByDFBridge() );

    return rc + 9;
}

///////////////////////////////////////////////////////////////////////////////
void MessageMarshaller::tightMarshal2( OpenWireFormat& wireFormat, DataStructure* dataStructure, DataOutputStream& dataOut, BooleanStream& bs ) {

    BaseCommandMarshaller::tightMarshal2( wireFormat, dataStructure, dataOut, bs );

    Message* info =
        dynamic_cast<Message*>( dataStructure );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getProducerId() );

    tightMarshalCachedObject2( wireFormat, data, dataOut, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getDestination() );

    tightMarshalCachedObject2( wireFormat, data, dataOut, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getTransactionId() );

    tightMarshalCachedObject2( wireFormat, data, dataOut, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getOriginalDestination() );

    tightMarshalCachedObject2( wireFormat, data, dataOut, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getMessageId() );

    tightMarshalNestedObject2( wireFormat, data, dataOut, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getOriginalTransactionId() );

    tightMarshalCachedObject2( wireFormat, data, dataOut, bs );
    tightMarshalString2( info->getGroupID(), dataOut, bs );
    dataOut->write( info->getGroupSequence() );
    tightMarshalString2( info->getCorrelationId(), dataOut, bs );
    bs->readBoolean();
    tightMarshalLong2( wireFormat, info->getExpiration(), dataOut, bs );
    dataOut->write( info->getPriority() );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getReplyTo() );

    tightMarshalNestedObject2( wireFormat, data, dataOut, bs );
    tightMarshalLong2( wireFormat, info->getTimestamp(), dataOut, bs );
    tightMarshalString2( info->getType(), dataOut, bs );
    if( bs->readBoolean() ) {
        dataOut->write( info->getContent().Length );
        dataOut->write( info->getContent() );
    }
    if( bs->readBoolean() ) {
        dataOut->write( info->getMarshalledProperties().Length );
        dataOut->write( info->getMarshalledProperties() );
    }
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getDataStructure() );

    tightMarshalNestedObject2( wireFormat, data, dataOut, bs );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getTargetConsumerId() );

    tightMarshalCachedObject2( wireFormat, data, dataOut, bs );
    bs->readBoolean();
    dataOut->write( info->getRedeliveryCounter() );
    tightMarshalObjectArray2( wireFormat, info->getBrokerPath(), dataOut, bs );
    tightMarshalLong2( wireFormat, info->getArrival(), dataOut, bs );
    tightMarshalString2( info->getUserID(), dataOut, bs );
    bs->readBoolean();
}

///////////////////////////////////////////////////////////////////////////////
void MessageMarshaller::looseUnmarshal( OpenWireFormat& wireFormat, DataStructure* dataStructure, DataInputStream& dataIn ) {
    BaseCommandMarshaller::looseUnmarshal( wireFormat, dataStructure, dataIn );
    Message* info = 
        dynamic_cast<Message*>( dataStructure );
   info->setProducerId( dynamic_cast<ProducerId* >( 
       looseUnmarshalCachedObject( wireFormat, dataIn ) ) );
   info->setDestination( dynamic_cast<ActiveMQDestination* >( 
       looseUnmarshalCachedObject( wireFormat, dataIn ) ) );
   info->setTransactionId( dynamic_cast<TransactionId* >( 
       looseUnmarshalCachedObject( wireFormat, dataIn ) ) );
   info->setOriginalDestination( dynamic_cast<ActiveMQDestination* >( 
       looseUnmarshalCachedObject( wireFormat, dataIn ) ) );
   info->setMessageId( dynamic_cast<MessageId* >( 
       looseUnmarshalNestedObject( wireFormat, dataIn ) ) );
   info->setOriginalTransactionId( dynamic_cast<TransactionId* >( 
       looseUnmarshalCachedObject( wireFormat, dataIn ) ) );
    info->setGroupID( looseUnmarshalString( dataIn ) );
    info->setGroupSequence( dataIn->readInt() );
    info->setCorrelationId( looseUnmarshalString( dataIn ) );
    info->setPersistent( dataIn->readBoolean() );
    info->setExpiration( looseUnmarshalLong( wireFormat, dataIn ) );
    info->setPriority( dataIn->readByte() );
   info->setReplyTo( dynamic_cast<ActiveMQDestination* >( 
       looseUnmarshalNestedObject( wireFormat, dataIn ) ) );
    info->setTimestamp( looseUnmarshalLong( wireFormat, dataIn ) );
    info->setType( looseUnmarshalString( dataIn ) );
    info->setContent( looseUnmarshalByteArray( dataIn ) );
    info->setMarshalledProperties( looseUnmarshalByteArray( dataIn ) );
   info->setDataStructure( dynamic_cast<DataStructure* >( 
       looseUnmarshalNestedObject( wireFormat, dataIn ) ) );
   info->setTargetConsumerId( dynamic_cast<ConsumerId* >( 
       looseUnmarshalCachedObject( wireFormat, dataIn ) ) );
    info->setCompressed( dataIn->readBoolean() );
    info->setRedeliveryCounter( dataIn->readInt() );

    if( dataIn->readBoolean() ) {
        short size = dataIn->readShort();
        BrokerId* value = new BrokerId[size];
        for( int i = 0; i < size; i++ ) {
            value[i] = dynamic_cast<BrokerId* >(
                looseUnmarshalNestedObject( wireFormat,dataIn ) );
        }
        info->setBrokerPath( value );
    }
    else {
        info->setBrokerPath( NULL );
    }
    info->setArrival( looseUnmarshalLong( wireFormat, dataIn ) );
    info->setUserID( looseUnmarshalString( dataIn ) );
    info->setRecievedByDFBridge( dataIn->readBoolean() );
}

///////////////////////////////////////////////////////////////////////////////
void MessageMarshaller::looseMarshal( OpenWireFormat& wireFormat, DataStructure* dataStructure, DataOutputStream& dataOut ) {
    Message* info =
        dynamic_cast<Message*>( dataStructure );
    BaseCommandMarshaller::looseMarshal( wireFormat, dataStructure, dataOut );

    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getProducerId() );

    looseMarshalCachedObject( wireFormat, data, dataOut );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getDestination() );

    looseMarshalCachedObject( wireFormat, data, dataOut );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getTransactionId() );

    looseMarshalCachedObject( wireFormat, data, dataOut );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getOriginalDestination() );

    looseMarshalCachedObject( wireFormat, data, dataOut );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getMessageId() );

    looseMarshalNestedObject( wireFormat, data, dataOut );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getOriginalTransactionId() );

    looseMarshalCachedObject( wireFormat, data, dataOut );
    looseMarshalString( info->getGroupID(), dataOut );
    dataOut->write( info->getGroupSequence() );
    looseMarshalString( info->getCorrelationId(), dataOut );
    dataOut->write( info->isPersistent() );
    looseMarshalLong( wireFormat, info->getExpiration(), dataOut );
    dataOut->write( info->getPriority() );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getReplyTo() );

    looseMarshalNestedObject( wireFormat, data, dataOut );
    looseMarshalLong( wireFormat, info->getTimestamp(), dataOut );
    looseMarshalString( info->getType(), dataOut );
    dataOut->write( info->getContent() != NULL );
    if( info->getContent() != NULL ) {
        dataOut->write( info->getContent().Length );
        dataOut->write( info->getContent() );
    }
    dataOut->write( info->getMarshalledProperties() != NULL );
    if( info->getMarshalledProperties() != NULL ) {
        dataOut->write( info->getMarshalledProperties().Length );
        dataOut->write( info->getMarshalledProperties() );
    }
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getDataStructure() );

    looseMarshalNestedObject( wireFormat, data, dataOut );
    DataStructure* data = 
        dynamic_cast< DataStructure* >( info->getTargetConsumerId() );

    looseMarshalCachedObject( wireFormat, data, dataOut );
    dataOut->write( info->isCompressed() );
    dataOut->write( info->getRedeliveryCounter() );
    looseMarshalObjectArray( wireFormat, info->getBrokerPath(), dataOut );
    looseMarshalLong( wireFormat, info->getArrival(), dataOut );
    looseMarshalString( info->getUserID(), dataOut );
    dataOut->write( info->isRecievedByDFBridge() );
}

